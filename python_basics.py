# -*- coding: utf-8 -*-
"""Python Basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t_icJg28OOqBf3kQnr-AHpz1BIm3p7lp
"""

name = 'brad'
print(name)

fruits = {'apples','grapes'}
print(fruits)

"""check apples in fruits set"""

print('apples' in fruits)

#add to set
fruits.add('Grapes')
print(fruits)

#Remove from set
fruits.remove('Grapes')

#To clear
fruits.clear()

#To delete set
del fruits

print(fruits)
#Error as we have deleted it



"""Dictionary# New Section

A dictionary is a collection which is ordered, changeable and indexed. No duplicate.
"""

#Create dict
person ={
    'first' : 'John',
    'Last' : 'Doe',
    'age' : 30
}

print(person, type(person))

#using constructors
#person2 = dict(first = 'sara', last = 'bha')
#print(person2)

#Gte a value
print(person2['first'])

#Add a key/value
person['phone'] = '54354135'

#get dict items
print(person.items())

#get dict keys
print(person.keys())

#copy a dict
person3 = person.copy()
person3['city'] = 'Boston'
print(person3)

#remove a itrm
del(person['age'])
print(person)

#to clear
person.clear()

print(len(person3))

#list of dict
people = [
          {'name':'mehul', 'age':19},
          {'name':'anant', 'age':19}
]
print(people)
print(people[0])



"""Function# New Section

A function is a block of code whcih only runs when it is called. In pyhton, we do not use curly  rackets, we use indentaion with tabs or spaces
"""

#create function
def sayhello(name = 'doe'):
  print(f'Hello{name}')
  

sayhello()

#Return value
def getsum(num1, num2):
 total = num1+num2
 return total

sum = getsum(6,7)
print(sum)

#Lambda - an anonymous function. Can take any number of arguments, but can only one expression. Very similar to JS arrow function
getSum = lambda num1, num2 : num1 + num2
print(getSum(3,6))



"""STATEMENTS
# New Section
"""

#comparison operator
x = 10
y=11
if x>y:
  print(f'{x} is greater than {y} ')

#if else
if x>y:
  print(f'{x} is greater than {y} ')
else:
  print(f'{y} is greater than {x} ')

#elif
if x>y:
  print(f'{x} is greater than {y} ')
elif x==y:
    print(print(f'{x} is equal than {y} '))
else:
  print(f'{y} is greater than {x} ')

#nested if
if x>2:
  if x<= 10:
    print('hello')

#logical operators
if x>2 and x<=10:
  print('heello')

if x>2 or x<=10:
  print('fifuj')

if not(x == y):
  print('hjff')

#Membership operator
numbers = [1,2,34,4]
if x in numbers:
  print(x in numbers)

if x not in numbers:
  print(x not in numbers)

if x is not y:
  print(x is y)

"""loops# New Section

A for loop is udes for iterationg over a sequence (i.e. either a list, a tuple, a dictionary or a string).

A while loop executes a set of arguments as long as a condition is true.
"""

people = ['jpn', 'pi','paul','susan']
#for loop
for person in people:
  print(f'Current version:{person}')

for person in people:
  if person == 'pi':
    break
  print(f'Current version:{person}')

#continue
for person in people:
  if person == 'pi':
    continue
  print(f'Current version:{person}')

#range
for i in range(len(people)):
  print(len(people[i]))

for i in range(0,11):
  print(f'number: {i}')

#While loop
count = 0
while count<=10:
  print('hello')
  count +=1



"""Modules# New Section

A module is basically a fiel conataining a set of functions to include in your applications. There are core python modules you can us eusing the pip python manager (including django) as well as custom modules.
"""

#core modules
import datetime
from datetime import date
import time
from time import time
#today = datetime.date.today()
today = date.today()
timestamp = time.time()
print(today, timestamp)

!pip install matplotlib-venn

!pip

!apt-get install

#pip module

from camelcase import CamelCase
c = CamelCase()
print(c.hump)

"""classes# New Section"""

#A class is like a blueprint for creating objects. An object has properties and methods(function) associated with it. Almost everything in python is an object.

#Create a class
class User:
  #constructor
  def __intit__(self, name, email, age):
    self.name = name
    self.email = email 
    self.age = age

#init user object
brad = User('brad guth','ksvosd@com',54)
print(brad.age)



"""Files# New Section

Pyhton has functions for creating, reading, updating and deleting files
"""

#open a file
myFile = open('myfile.txt', 'w')

#fet info in this file
print('name:', myFile.name)
print('Is closed:', myFile.closed)
print('Opening Mode :', myFile.mode)

#Write to Pyhton
myFile.write('I love Pythin')
myFile.write('and JS')
myFile.close()

#Append to a file
myFile = open('myfile.txt', 'a')
myFile.write('I also like PHP')

#Read from a file
myFile = open('nyFile.txt', 'r+')
text = myFile.read(100)
print(text)